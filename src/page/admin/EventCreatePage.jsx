import React, { useState, useCallback } from 'react';
import { 
  Calendar, Clock, MapPin, Users, Award, DollarSign, 
  Camera, FileText, Settings, Eye, Save, Send, X, Plus,
  AlertCircle, Info, CheckCircle, Upload, Tag, Shield,
  Heart, Star, Building, Phone, Mail, Globe, Image
} from 'lucide-react';

export default function EventCreatePage() {
  const [currentStep, setCurrentStep] = useState(4);
  const [formData, setFormData] = useState({
    // Basic Info
    title: '',
    description: '',
    category: '',
    eventType: 'volunteer', // volunteer, charity, community
    organizerType: 'partner', // partner, individual, organization
    
    // Schedule & Location
    startDate: '',
    endDate: '',
    startTime: '',
    endTime: '',
    timezone: 'Asia/Ho_Chi_Minh',
    location: '',
    address: '',
    coordinates: null,
    isOnline: false,
    onlineLink: '',
    
    // Volunteer Requirements
    minAge: 16,
    maxAge: 65,
    genderRequirement: 'any', // any, male, female
    skillsRequired: [],
    experienceLevel: 'beginner', // beginner, intermediate, advanced
    volunteersNeeded: 10,
    registrationDeadline: '',
    
    // Benefits & Support
    benefits: {
      meals: false,
      transportation: false,
      accommodation: false,
      insurance: false,
      certificate: true,
      allowance: false,
      allowanceAmount: 0,
      descriptionBenfits : "",
      uniform: false,
      training: false,
      another: false,
    },
    
    // Media & Documents
    coverImage: null,
    additionalImages: [],
    documents: [],
    contactInfo: {
      coordinatorName: '',
      phone: '',
      email: '',
      alternateContact: ''
    },
    
    // Advanced Settings
    autoApprove: false,
    requireBackground: false,
    isPublic: true,
    tags: [],
    customFields: [],
    
    // Approval Settings
    needsApproval: true,
    priority: 'normal', // low, normal, high, urgent
    targetAudience: 'general' // general, students, professionals, seniors
  });

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [previewMode, setPreviewMode] = useState(false);

  const categories = [
    'M√¥i tr∆∞·ªùng', 'Gi√°o d·ª•c', 'Y t·∫ø', 'Tr·∫ª em', 'Ng∆∞·ªùi cao tu·ªïi',
    'Ng∆∞·ªùi khuy·∫øt t·∫≠t', 'C·ªông ƒë·ªìng', 'VƒÉn h√≥a', 'Th·ªÉ thao', 'Kh√°c'
  ];

  const skillOptions = [
    'Ti·∫øng Anh', 'Tin h·ªçc', 'Y t·∫ø', 'Gi·∫£ng d·∫°y', 'T·ªï ch·ª©c s·ª± ki·ªán',
    'Nhi·∫øp ·∫£nh', 'Thi·∫øt k·∫ø', 'Marketing', 'K·∫ø to√°n', 'Ph√°p l√Ω',
    'N·∫•u ƒÉn', 'Th·ªß c√¥ng', '√Çm nh·∫°c', 'M√∫a h√°t', 'Th·ªÉ thao'
  ];

  const steps = [
    { id: 1, title: 'Th√¥ng tin c∆° b·∫£n', icon: FileText },
    { id: 2, title: 'Th·ªùi gian & ƒê·ªãa ƒëi·ªÉm', icon: Calendar },
    { id: 3, title: 'Y√™u c·∫ßu TNV', icon: Users },
    { id: 4, title: 'Quy·ªÅn l·ª£i & H·ªó tr·ª£', icon: Award },
    { id: 5, title: 'Media & Li√™n h·ªá', icon: Camera },
    { id: 6, title: 'C√†i ƒë·∫∑t n√¢ng cao', icon: Settings }
  ];

  const interest = [
                  { key: 'meals', label: 'B·ªØa ƒÉn', icon: 'üçΩÔ∏è' },
                  { key: 'transportation', label: 'H·ªó tr·ª£ ƒëi l·∫°i', icon: 'üöå' },
                  { key: 'accommodation', label: 'Ch·ªó ·ªü', icon: 'üè†' },
                  { key: 'insurance', label: 'B·∫£o hi·ªÉm', icon: 'üõ°Ô∏è' },
                  { key: 'certificate', label: 'Ch·ª©ng nh·∫≠n', icon: 'üèÜ' },
                  { key: 'uniform', label: 'Trang ph·ª•c', icon: 'üëï' },
                  { key: 'training', label: 'ƒê√†o t·∫°o', icon: 'üìö' },
                  { key: 'allowance', label: 'Ph·ª• c·∫•p', icon: 'üí∞' },
                  { key: 'another', label: 'Kh√°c', icon: 'üí∞' }
                ]
  const handleInputChange = useCallback((field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: null
      }));
    }
  }, [errors]);

  const handleNestedInputChange = useCallback((section, field, value) => {
    setFormData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  }, []);

  const handleArrayAdd = useCallback((field, value) => {
    if (value && !formData[field].includes(value)) {
      setFormData(prev => ({
        ...prev,
        [field]: [...prev[field], value]
      }));
    }
  }, [formData]);

  const handleArrayRemove = useCallback((field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].filter(item => item !== value)
    }));
  }, []);

  const validateStep = (step) => {
    const newErrors = {};
    
    switch (step) {
      case 1:
        if (!formData.title) newErrors.title = 'T√™n s·ª± ki·ªán l√† b·∫Øt bu·ªôc';
        if (!formData.description) newErrors.description = 'M√¥ t·∫£ s·ª± ki·ªán l√† b·∫Øt bu·ªôc';
        if (!formData.category) newErrors.category = 'Danh m·ª•c l√† b·∫Øt bu·ªôc';
        break;
      case 2:
        if (!formData.startDate) newErrors.startDate = 'Ng√†y b·∫Øt ƒë·∫ßu l√† b·∫Øt bu·ªôc';
        if (!formData.startTime) newErrors.startTime = 'Gi·ªù b·∫Øt ƒë·∫ßu l√† b·∫Øt bu·ªôc';
        if (!formData.isOnline && !formData.location) newErrors.location = 'ƒê·ªãa ƒëi·ªÉm l√† b·∫Øt bu·ªôc';
        break;
      case 3:
        if (formData.volunteersNeeded < 1) newErrors.volunteersNeeded = 'C·∫ßn √≠t nh·∫•t 1 t√¨nh nguy·ªán vi√™n';
        break;
      case 5:
        if (!formData.contactInfo.coordinatorName) newErrors.coordinatorName = 'T√™n ƒëi·ªÅu ph·ªëi vi√™n l√† b·∫Øt bu·ªôc';
        if (!formData.contactInfo.phone) newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
        if (!formData.contactInfo.email) newErrors.email = 'Email l√† b·∫Øt bu·ªôc';
        break;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, steps.length));
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const handleSubmit = async (asDraft = false) => {
    setIsSubmitting(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const submitData = {
        ...formData,
        status: asDraft ? 'draft' : 'pending_approval',
        createdAt: new Date().toISOString(),
        submittedBy: 'current_user_id'
      };
      
      console.log('Submitting event:', submitData);
      
      // Show success message and redirect
      alert(asDraft ? 'S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c l∆∞u nh√°p!' : 'S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c g·ª≠i ph√™ duy·ªát!');
      
    } catch (error) {
      console.error('Submit error:', error);
      alert('C√≥ l·ªói x·∫£y ra khi t·∫°o s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                T√™n s·ª± ki·ªán <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                placeholder="VD: L√†m s·∫°ch b·ªù bi·ªÉn V≈©ng T√†u"
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                  errors.title ? 'border-red-500' : 'border-gray-300'
                }`}
              />
              {errors.title && <p className="mt-1 text-sm text-red-600">{errors.title}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                M√¥ t·∫£ s·ª± ki·ªán <span className="text-red-500">*</span>
              </label>
              <textarea
                rows={6}
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·ª± ki·ªán, m·ª•c ƒë√≠ch, √Ω nghƒ©a..."
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                  errors.description ? 'border-red-500' : 'border-gray-300'
                }`}
              />
              {errors.description && <p className="mt-1 text-sm text-red-600">{errors.description}</p>}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Danh m·ª•c <span className="text-red-500">*</span>
                </label>
                <select
                  value={formData.category}
                  onChange={(e) => handleInputChange('category', e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    errors.category ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">Ch·ªçn danh m·ª•c</option>
                  {categories.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
                {errors.category && <p className="mt-1 text-sm text-red-600">{errors.category}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Lo·∫°i s·ª± ki·ªán
                </label>
                <select
                  value={formData.eventType}
                  onChange={(e) => handleInputChange('eventType', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="volunteer">T√¨nh nguy·ªán</option>
                  <option value="charity">T·ª´ thi·ªán</option>
                  <option value="community">C·ªông ƒë·ªìng</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ƒê·ªëi t∆∞·ª£ng m·ª•c ti√™u
              </label>
              <select
                value={formData.targetAudience}
                onChange={(e) => handleInputChange('targetAudience', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="general">T·∫•t c·∫£ m·ªçi ng∆∞·ªùi</option>
                <option value="students">Sinh vi√™n</option>
                <option value="professionals">Ng∆∞·ªùi ƒëi l√†m</option>
                <option value="seniors">Ng∆∞·ªùi cao tu·ªïi</option>
              </select>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ng√†y b·∫Øt ƒë·∫ßu <span className="text-red-500">*</span>
                </label>
                <input
                  type="date"
                  value={formData.startDate}
                  onChange={(e) => handleInputChange('startDate', e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    errors.startDate ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.startDate && <p className="mt-1 text-sm text-red-600">{errors.startDate}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Gi·ªù b·∫Øt ƒë·∫ßu <span className="text-red-500">*</span>
                </label>
                <input
                  type="time"
                  value={formData.startTime}
                  onChange={(e) => handleInputChange('startTime', e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    errors.startTime ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.startTime && <p className="mt-1 text-sm text-red-600">{errors.startTime}</p>}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ng√†y k·∫øt th√∫c
                </label>
                <input
                  type="date"
                  value={formData.endDate}
                  onChange={(e) => handleInputChange('endDate', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Gi·ªù k·∫øt th√∫c
                </label>
                <input
                  type="time"
                  value={formData.endTime}
                  onChange={(e) => handleInputChange('endTime', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </div>

            <div className="flex items-center space-x-3">
              <input
                type="checkbox"
                id="isOnline"
                checked={formData.isOnline}
                onChange={(e) => handleInputChange('isOnline', e.target.checked)}
                className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <label htmlFor="isOnline" className="text-sm font-medium text-gray-700">
                S·ª± ki·ªán tr·ª±c tuy·∫øn
              </label>
            </div>

            {!formData.isOnline ? (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ƒê·ªãa ƒëi·ªÉm <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    value={formData.location}
                    onChange={(e) => handleInputChange('location', e.target.value)}
                    placeholder="VD: B√£i bi·ªÉn B√£i Tr∆∞·ªõc, V≈©ng T√†u"
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.location ? 'border-red-500' : 'border-gray-300'
                    }`}
                  />
                  {errors.location && <p className="mt-1 text-sm text-red-600">{errors.location}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ƒê·ªãa ch·ªâ chi ti·∫øt
                  </label>
                  <textarea
                    rows={3}
                    value={formData.address}
                    onChange={(e) => handleInputChange('address', e.target.value)}
                    placeholder="ƒê·ªãa ch·ªâ c·ª• th·ªÉ, h∆∞·ªõng d·∫´n ƒë∆∞·ªùng ƒëi..."
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </>
            ) : (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Link tham gia online
                </label>
                <input
                  type="url"
                  value={formData.onlineLink}
                  onChange={(e) => handleInputChange('onlineLink', e.target.value)}
                  placeholder="https://meet.google.com/..."
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            )}
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  S·ªë l∆∞·ª£ng TNV c·∫ßn tuy·ªÉn <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  min="1"
                  value={formData.volunteersNeeded}
                  onChange={(e) => handleInputChange('volunteersNeeded', parseInt(e.target.value) || 0)}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    errors.volunteersNeeded ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.volunteersNeeded && <p className="mt-1 text-sm text-red-600">{errors.volunteersNeeded}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  H·∫°n ƒëƒÉng k√Ω
                </label>
                <input
                  type="date"
                  value={formData.registrationDeadline}
                  onChange={(e) => handleInputChange('registrationDeadline', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Tu·ªïi t·ªëi thi·ªÉu
                </label>
                <input
                  type="number"
                  min="16"
                  max="65"
                  value={formData.minAge}
                  onChange={(e) => handleInputChange('minAge', parseInt(e.target.value) || 16)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Tu·ªïi t·ªëi ƒëa
                </label>
                <input
                  type="number"
                  min="16"
                  max="99"
                  value={formData.maxAge}
                  onChange={(e) => handleInputChange('maxAge', parseInt(e.target.value) || 65)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Y√™u c·∫ßu gi·ªõi t√≠nh
                </label>
                <select
                  value={formData.genderRequirement}
                  onChange={(e) => handleInputChange('genderRequirement', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="any">Kh√¥ng y√™u c·∫ßu</option>
                  <option value="male">Nam</option>
                  <option value="female">N·ªØ</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                M·ª©c ƒë·ªô kinh nghi·ªám
              </label>
              <select
                value={formData.experienceLevel}
                onChange={(e) => handleInputChange('experienceLevel', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="beginner">Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu</option>
                <option value="intermediate">C√≥ kinh nghi·ªám</option>
                <option value="advanced">Chuy√™n nghi·ªáp</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                K·ªπ nƒÉng y√™u c·∫ßu
              </label>
              <div className="flex flex-wrap gap-2 mb-3">
                {formData.skillsRequired.map((skill) => (
                  <span
                    key={skill}
                    className="inline-flex items-center px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full"
                  >
                    {skill}
                    <button
                      type="button"
                      onClick={() => handleArrayRemove('skillsRequired', skill)}
                      className="ml-2 text-blue-600 hover:text-blue-800"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </span>
                ))}
              </div>
              <select
                onChange={(e) => {
                  if (e.target.value) {
                    handleArrayAdd('skillsRequired', e.target.value);
                    e.target.value = '';
                  }
                }}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Ch·ªçn k·ªπ nƒÉng</option>
                {skillOptions.filter(skill => !formData.skillsRequired.includes(skill)).map(skill => (
                  <option key={skill} value={skill}>{skill}</option>
                ))}
              </select>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">Quy·ªÅn l·ª£i cho t√¨nh nguy·ªán vi√™n</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {interest?.map((benefit) => (
                  <label key={benefit.key} className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50">
                    <input
                      type="checkbox"
                      checked={formData.benefits[benefit.key]}
                      onChange={(e) => handleNestedInputChange('benefits', benefit.key, e.target.checked)}
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="text-sm font-medium text-gray-700">{benefit.label}</span>
                  </label>
                ))}
              </div>
            </div>

            {formData.benefits.allowance && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M·ª©c ph·ª• c·∫•p (VNƒê)
                </label>
                <input
                  type="number"
                  min="0"
                  value={formData.benefits.allowanceAmount}
                  onChange={(e) => handleNestedInputChange('benefits', 'allowanceAmount', parseInt(e.target.value) || 0)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="VD: 200000"
                />
              </div>
            )}

            {formData.benefits.another && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M√¥ t·∫£ v·ªÅ quy·ªÅn l·ª£i:
                </label>
                <input
                  type="text"
                  value={formData.benefits.descriptionBenfits}
                  onChange={(e) => handleNestedInputChange('benefits', 'descriptionBenfits', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="M√¥ t·∫£ quy·ªÅn l·ª£i"
                />
              </div>
            )}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex">
                <Info className="w-5 h-5 text-blue-600 mr-3 mt-0.5" />
                <div>
                  <h4 className="text-sm font-medium text-blue-900">L∆∞u √Ω v·ªÅ quy·ªÅn l·ª£i</h4>
                  <p className="text-sm text-blue-700 mt-1">
                    Vi·ªác cung c·∫•p quy·ªÅn l·ª£i t·ªët s·∫Ω gi√∫p thu h√∫t nhi·ªÅu t√¨nh nguy·ªán vi√™n ch·∫•t l∆∞·ª£ng h∆°n v√† tƒÉng t·ª∑ l·ªá ho√†n th√†nh s·ª± ki·ªán.
                  </p>
                </div>
              </div>
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ·∫¢nh b√¨a s·ª± ki·ªán
              </label>
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors">
                {formData.coverImage ? (
                  <div className="relative">
                    <img
                      src={URL.createObjectURL(formData.coverImage)}
                      alt="Cover"
                      className="mx-auto h-48 w-auto rounded-lg"
                    />
                    <button
                      type="button"
                      onClick={() => handleInputChange('coverImage', null)}
                      className="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                ) : (
                  <div>
                    <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                    <p className="text-sm text-gray-500">Click ƒë·ªÉ t·∫£i l√™n ·∫£nh b√¨a</p>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => handleInputChange('coverImage', e.target.files[0])}
                      className="hidden"
                      id="coverImage"
                    />
                    <label
                      htmlFor="coverImage"
                      className="mt-2 inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer"
                    >
                      Ch·ªçn ·∫£nh
                    </label>
                  </div>
                )}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">Th√¥ng tin li√™n h·ªá</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    T√™n ƒëi·ªÅu ph·ªëi vi√™n <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    value={formData.contactInfo.coordinatorName}
                    onChange={(e) => handleNestedInputChange('contactInfo', 'coordinatorName', e.target.value)}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.coordinatorName ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="T√™n ng∆∞·ªùi ph·ª• tr√°ch s·ª± ki·ªán"
                  />
                  {errors.coordinatorName && <p className="mt-1 text-sm text-red-600">{errors.coordinatorName}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    S·ªë ƒëi·ªán tho·∫°i <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="tel"
                    value={formData.contactInfo.phone}
                    onChange={(e) => handleNestedInputChange('contactInfo', 'phone', e.target.value)}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.phone ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="0901234567"
                  />
                  {errors.phone && <p className="mt-1 text-sm text-red-600">{errors.phone}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="email"
                    value={formData.contactInfo.email}
                    onChange={(e) => handleNestedInputChange('contactInfo', 'email', e.target.value)}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.email ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="contact@example.com"
                  />
                  {errors.email && <p className="mt-1 text-sm text-red-600">{errors.email}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Li√™n h·ªá d·ª± ph√≤ng
                  </label>
                  <input
                    type="text"
                    value={formData.contactInfo.alternateContact}
                    onChange={(e) => handleNestedInputChange('contactInfo', 'alternateContact', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="S·ªë ƒëi·ªán tho·∫°i ho·∫∑c email d·ª± ph√≤ng"
                  />
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ·∫¢nh b·ªï sung
              </label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {formData.additionalImages.map((image, index) => (
                  <div key={index} className="relative">
                    <img
                      src={URL.createObjectURL(image)}
                      alt={`Additional ${index + 1}`}
                      className="w-full h-24 object-cover rounded-lg"
                    />
                    <button
                      type="button"
                      onClick={() => {
                        const newImages = [...formData.additionalImages];
                        newImages.splice(index, 1);
                        handleInputChange('additionalImages', newImages);
                      }}
                      className="absolute top-1 right-1 p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </div>
                ))}
                {formData.additionalImages.length < 8 && (
                  <label className="flex items-center justify-center h-24 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 cursor-pointer">
                    <Plus className="w-6 h-6 text-gray-400" />
                    <input
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={(e) => {
                        const newImages = [...formData.additionalImages, ...Array.from(e.target.files)];
                        handleInputChange('additionalImages', newImages.slice(0, 8));
                      }}
                      className="hidden"
                    />
                  </label>
                )}
              </div>
              <p className="text-sm text-gray-500 mt-2">T·ªëi ƒëa 8 ·∫£nh b·ªï sung</p>
            </div>
          </div>
        );

      case 6:
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t ph√™ duy·ªát</h3>
              <div className="space-y-4">
                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    id="autoApprove"
                    checked={formData.autoApprove}
                    onChange={(e) => handleInputChange('autoApprove', e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="autoApprove" className="text-sm font-medium text-gray-700">
                    T·ª± ƒë·ªông ph√™ duy·ªát ƒëƒÉng k√Ω (ch·ªâ v·ªõi TNV ƒë√£ x√°c minh)
                  </label>
                </div>

                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    id="requireBackground"
                    checked={formData.requireBackground}
                    onChange={(e) => handleInputChange('requireBackground', e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="requireBackground" className="text-sm font-medium text-gray-700">
                    Y√™u c·∫ßu ki·ªÉm tra l√Ω l·ªãch
                  </label>
                </div>

                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    id="isPublic"
                    checked={formData.isPublic}
                    onChange={(e) => handleInputChange('isPublic', e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="isPublic" className="text-sm font-medium text-gray-700">
                    C√¥ng khai tr√™n trang ch·ªß
                  </label>
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                M·ª©c ƒë·ªô ∆∞u ti√™n
              </label>
              <select
                value={formData.priority}
                onChange={(e) => handleInputChange('priority', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="low">Th·∫•p</option>
                <option value="normal">B√¨nh th∆∞·ªùng</option>
                <option value="high">Cao</option>
                <option value="urgent">Kh·∫©n c·∫•p</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tags
              </label>
              <div className="flex flex-wrap gap-2 mb-3">
                {formData.tags.map((tag) => (
                  <span
                    key={tag}
                    className="inline-flex items-center px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full"
                  >
                    <Tag className="w-3 h-3 mr-1" />
                    {tag}
                    <button
                      type="button"
                      onClick={() => handleArrayRemove('tags', tag)}
                      className="ml-2 text-green-600 hover:text-green-800"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </span>
                ))}
              </div>
              <div className="flex gap-2">
                <input
                  type="text"
                  placeholder="Th√™m tag m·ªõi..."
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  onKeyPress={(e) => {
                    if (e.key === 'Enter' && e.target.value.trim()) {
                      handleArrayAdd('tags', e.target.value.trim());
                      e.target.value = '';
                    }
                  }}
                />
                <button
                  type="button"
                  onClick={(e) => {
                    const input = e.target.previousElementSibling;
                    if (input.value.trim()) {
                      handleArrayAdd('tags', input.value.trim());
                      input.value = '';
                    }
                  }}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  <Plus className="w-4 h-4" />
                </button>
              </div>
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex">
                <AlertCircle className="w-5 h-5 text-yellow-600 mr-3 mt-0.5" />
                <div>
                  <h4 className="text-sm font-medium text-yellow-900">L∆∞u √Ω v·ªÅ ph√™ duy·ªát</h4>
                  <p className="text-sm text-yellow-700 mt-1">
                    S·ª± ki·ªán s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn Admin ƒë·ªÉ ph√™ duy·ªát tr∆∞·ªõc khi c√¥ng b·ªë. Th·ªùi gian ph√™ duy·ªát th√¥ng th∆∞·ªùng l√† 24-48 gi·ªù.
                  </p>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };


  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">T·∫°o s·ª± ki·ªán t√¨nh nguy·ªán</h1>
          <p className="text-gray-600 mt-2">T·∫°o v√† qu·∫£n l√Ω s·ª± ki·ªán t√¨nh nguy·ªán m·ªõi</p>
        </div>

        {/* Progress Steps */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            {steps.map((step) => {
              const StepIcon = step.icon;
              return (
                <div
                  key={step.id}
                  className={`flex items-center ${step.id < steps.length ? 'flex-1' : ''}`}
                >
                  <div className="flex items-center">
                    <div
                      className={`w-10 h-10 rounded-full flex items-center justify-center ${
                        currentStep >= step.id
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-200 text-gray-500'
                      }`}
                    >
                      {currentStep > step.id ? (
                        <CheckCircle className="w-5 h-5" />
                      ) : (
                        <StepIcon className="w-5 h-5" />
                      )}
                    </div>
                    <div className="ml-3">
                      <p className={`text-sm font-medium ${
                        currentStep >= step.id ? 'text-blue-600' : 'text-gray-500'
                      }`}>
                        Step {step.id}
                      </p>
                      <p className={`text-xs ${
                        currentStep >= step.id ? 'text-blue-600' : 'text-gray-500'
                      }`}>
                        {step.title}
                      </p>
                    </div>
                  </div>
                  {step.id < steps.length && (
                    <div
                      className={`flex-1 h-1 mx-4 ${
                        currentStep > step.id ? 'bg-blue-600' : 'bg-gray-200'
                      }`}
                    />
                  )}
                </div>
              );
            })}
          </div>
        </div>

        {/* Form Content */}
        <div className="bg-white rounded-xl shadow-sm p-8">
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-gray-900">
              {steps.find(s => s.id === currentStep)?.title}
            </h2>
          </div>

          {renderStepContent()}

          {/* Navigation Buttons */}
          <div className="flex items-center justify-between mt-8 pt-6 border-t">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Quay l·∫°i
            </button>

            <div className="flex space-x-3">
              {currentStep === steps.length ? (
                <>
                  <button
                    onClick={() => setPreviewMode(true)}
                    className="flex items-center px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                  >
                    <Eye className="w-4 h-4 mr-2" />
                    Preview
                  </button>
                  <button
                    onClick={() => handleSubmit(true)}
                    disabled={isSubmitting}
                    className="flex items-center px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {isSubmitting ? 'ƒêang l∆∞u...' : 'L∆∞u nh√°p'}
                  </button>
                  <button
                    onClick={() => handleSubmit(false)}
                    disabled={isSubmitting}
                    className="flex items-center px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
                  >
                    <Send className="w-4 h-4 mr-2" />
                    {isSubmitting ? 'ƒêang g·ª≠i...' : 'G·ª≠i ph√™ duy·ªát'}
                  </button>
                </>
              ) : (
                <button
                  onClick={nextStep}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  Ti·∫øp t·ª•c
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}